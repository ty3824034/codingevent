#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('new-project:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const users = {};
const usersArray = [];

var server = http.createServer(app);
const io = require("socket.io")(server)
const { ExpressPeerServer } = require('peer')

const customGenerationFunction = () =>
  (Math.random().toString(36) + "0000000000000000000").substr(2, 16);

const peerServer = ExpressPeerServer(server, {
  debug: true,
  // path: "/",
  // generateClientId: customGenerationFunction,
});

app.use("/mypeer", peerServer);



io.on('connection', socket => {

  console.log("New user connected", socket.id)

  socket.on('join-room', ({ userId, roomID }) => {
    socket.join(roomID)
    socket.to(roomID).broadcast.emit('user-connected', userId)
  })


  socket.on('new-user-joined', name => {
    socket.emit('alreadyJoined', usersArray);
    users[socket.id] = name;
    usersArray.push({ name: name, id: socket.id });
    socket.broadcast.emit('user-joined', { name: name, id: socket.id });

  })
  socket.on('send', message => {
    console.log(message)
    // socket.broadcast.emit('receive', { message: message, name: users[socket.id] })
    io.emit('receive', { message: message, name: users[socket.id] })
  })
  socket.on('disconnect', () => {

    socket.broadcast.emit('disconnected', { name: users[socket.id], id: socket.id });
    for (i = 0; i < usersArray.length; i++) {
      if (usersArray[i].id === socket.id) {
        usersArray.splice(i, 1);
      }
    }
    delete users[socket.id]
    console.log("disconnected")
  })


})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
